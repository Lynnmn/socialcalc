# socialcalc阅读笔记

为了进行二次开发, 必须详细阅读源代码, 本文作为阅读代码的笔记, 其他人研究可以参考.

## 概述
socialcalc是一个强大电子表格系统, 其核心是公式计算, 数据渲染. [其架构已经有人详细介绍](http://www.aosabook.org/en/socialcalc.html).
其数据交互和渲染是通过一种命令机制完成的. 好处是各个模块之间的耦合性很低, 架构清晰.
在数据格式的保存与解析也是有优化机制的, 使用过的样式都保存为索引, 下次使用或者保存文件都是通过索引获取. 
这样保证的整个电子表格的样式信息是有常数上限的.

由于socialcalc项目较早, 虽然其licence号称是'Artistic License 2.0', 其代码风格并没有赶上当代的演进, 因为javascript语言已经发生了很多变化.

无论如何, 这是个解放生产力的项目.
经过改造, 目前可以支持多个表单, 以及图表. 试图与MS的电子表格表现一致, 以减少用户的学习成本.
当然, 目前可以达到简易使用, 距离商业用户级仍有较大测差距. 本来也是自编自用.

最核心的文件有3个, formula1.js, formatnumber2.js, socialcalc-3.js. 从文件名序号可以看出, 三者的重要关系.

## 文件详解

### formular1.js, formatnumber2.js

这是整个项目的核心文件, 也是比较独立的模块, 分别负责公式计算和格式化数字渲染. 当跨表单(sheet)访问的时候, 也需要这个模块支持. 
这两个文件甚至可以单独作为js库, 被别的项目单独引用使用.
逻辑非常清晰, 很容易看明白.

### socialcalc-3.js

这个表单(sheet)的核心文件, 用于组织单元格数据, 数据文件保存和解析, 实时渲染数据; 
包含必要的html元素, 如表单所在的html元素节点.
该文件包含两个重要的模块Sheet和RenderContext, 分别负责数据管理和视图渲染.

#### Sheet

* 表单的组成
每一个sheet都代表一个表单, 其包含以下内容.
  1. cells, 表单内全部单元格的数据
  2. attribs, 表单的全局属性, 比如默认对齐方式等. 当单元格数据没有使用样式, 会默认使用表格的全局属性. 
  其中{lastcol, lastrow}表示最远的单元格位置, 用来表示该表单的实际大小.
  3. rowattribs, 包含每一行的行高和隐藏的行.
  4. rolattribs, 包含每一列的列宽和隐藏的列.
  5. names:{desc:"xxx",definition:"A1:B2"}, 可以给表单命名. 看起来好像可以定义表单中的表单. 暂时没用到.
  6. layouts:[], layouthash:{}, 这两个联合使用, 分别保存布局, 以及布局的索引. 
  假设, 我们设置某一单元格为左对齐(left-align), 发现layouthash中已经存在"left-align", 直接给这个单元格的对其格式设置索引, 不会再单独保存"left-align".
  这也是我上面说的, 一种存储优化方式.
  7. xxxs:[], xxxhash:{}, 同6. 也是一样的道理, 保存的是样式以及样式索引表.
  8. copyfrom
  9. changes, 里面包含todo和redo, 分别记录撤销列表和重做列表.
  10. reanderneeded: 是否需要重新绘制. 当某一个单元格变化或者其他事件发生, 这个值会设置为true. 然后表单自动完成重新绘制.
  11. changerendervalue, 当单元格的外观发生变化, 比如字体颜色, 单元格合并, 这个值为true, 然后表单自动完成相应的重绘. 
  13. recalcchangevalue, 由于某些单元格依赖另外的单元格发生变化, 导致自身也需要重新计算. 这时候为true, 系统然后会自动重新计算.

* 单元格
单元格都保存在sheet.cells中, 其索引是类似"A1"这样的坐标, 而且不是连续的.
  1. corrd, 坐标, 格式为"A1"
  2. datavalue, 就是单元格的真实数值.
  3. datatype, 是datavalue的类型, 可以为数字, 文本, 公式, 常数.
  4. formular, 当datatype为公式的时候, 实际的公式就保存在这里.
  5. valuetype, 表示单元格的格式, 比如空白, 数字, 文本, 错误, 时间, 金钱, 逻辑(布尔变量)
  6. displayvalue, 根据valuetype来决定用户看到的真正字符串.
  7. parseinfo: 缓存公式.
  8. bt, br, bb, bl. 分别表示border top, border right, border bottom, border left, 就是单元各边框的意思.
  9. layout, 对齐方式, 上下对齐.
  10. cellformat, 水平对齐, 左中右.
  11. nontextformat, 自定义非文本格式.
  12. textformat, 自定义文本格式.
  13. colspan, rowspan, 合并单元格数量. 第一个格子数据占据全部格子.
  14. cssc, 自定义css样式类(class)名.
  15. csss, 自定义css样式(style).
  16. comment, 注释.
  17. mod, 是否允许修改(Y表示可以).
  18. cellProperties, 表格属性, 用于单位计算, 比如像素值.

* 包含方法
  1. 初始化(new).
  2. 添加cell.
  3. 解析文件/保存文件.
  4. 调度命令.
  5. 撤销/重做.
  6. 重新计算.

#### RenderConext

这个模块负责渲染与html相关, 可以渲染表格, 并且返回<table>元素.
  1. sheetobj, 管理的sheet
  2. showgrid, 是否显示网格.
  3. showRcHeader, 是否显示行列的标题
  4. rownamewidth, 默认的行宽. 正常情况下, 如果包含字数较多, 很自动变化(比如滚动条到第10000行, 包含4个数字).
  5. pixelPerRow, 默认行高.
  6. cellskip:{} 在里面的cell不进行渲染.
  7. coorToCr:{"A1":{row:5, col:5}} pane开始的cell
  8. colwid:[], 列宽.
  9: totalwidth, 总列宽.
  10. rowpanes:[], pane的起始行和末尾行.
  11. colpans:[], pan的起始列和末尾列.
  12. highlights:[], 高亮的cell集合.
  13. cursorsuffix.
  14. cellIdPrefix, 每个cell对应的id前缀.
  15. defaultlinkstyle: 链接样式.
  16. defaultHTMLLinkstyle: 没有使用到.
  17. classnames:{}

### socialcalctableeditor.js

这个是用于与表单交互的模块. 如果自己做一个电子表格, 这个文件基本上不用改动就可以使用.
这个文件包含必要的html元素, 还有自定义的滚动条, 以及键盘, 鼠标, 窗口大小改变等等各类事件处理.

当用户修改表单的时候, 首先感受到的就是editor; editor会将事件通过命令的方式传递给context和sheet. 
sheet执行完之后, editor也可以感知, 进而可以进行我们自己的逻辑处理(通过sheet.statuscallback完成).

从容器的角度来讲, tableEditor包含renderContext, renderContext包含sheet.

### 其他文件.

其他文件包含xxxcontrols.js和xxx.pl. 分别是ui文件和后端处理的perl文件.
对于我们来说, js中的ui框架日新月异, 原项目的html拼接的方式显然已经落伍很多, 因此我们就抛弃掉了.
pl是作为电子表格的处理服务器代码, 我们改用其他的更现代化的语言去写了, 因此perl代码也被我们抛弃了.

以上.

如有疑问请联系95813422(AT)qq.com
